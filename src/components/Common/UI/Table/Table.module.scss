.root {
  width: 100%;

  :global(.react-aria-Table) {
    background: var(--g-colorBody);
    border: 1px solid var(--g-colorBorder);
    outline: none;
    border-spacing: 0;
    min-height: 100px;
    align-self: start;
    width: 100%;
    word-break: break-word;
    forced-color-adjust: none;
    border-radius: toRem(12);
    border-collapse: separate;
    box-shadow: var(--g-shadowResting);

    &[data-focus-visible] {
      outline: var(--g-focusRingWidth) solid var(--g-focusRingColor);
    }

    :global(.react-aria-TableHeader) {
      th {
        color: var(--g-colorBodyContent);
        font-weight: 500;
        font-size: var(--g-fontSizeExtraSmall);
        background-color: var(--g-colorBodyAccent);
        color: var(--g-colorBodySubContent);
        border-bottom: 1px solid var(--g-colorBorder);

        &:first-child {
          border-top-left-radius: toRem(12);
        }

        &:last-child {
          border-top-right-radius: toRem(12);
        }
      }

      //Produces spacing between header and body
      &:after {
        content: '';
        display: table-row;
        height: 2px;
      }

      & tr:last-child .react-aria-Column {
        border-bottom: 1px solid var(--g-colorBorder);
        cursor: default;
      }
    }

    :global(.react-aria-Row) {
      outline: none;
      cursor: default;
      color: var(--g-colorBodySubContent);
      font-size: var(--g-fontSizeSmall);
      position: relative;
      transform: scale(1);

      &:last-child :global(.react-aria-Cell) {
        border-bottom: none !important;
      }

      &[data-footer='true'] {
        border-top: 1px solid var(--g-colorBorder);

        :global(.react-aria-Cell) {
          font-weight: 700 !important;
          color: var(--g-colorBodyContent) !important;

          // Override any nested elements that might have their own font-weight
          * {
            font-weight: inherit !important;
          }
        }
      }

      &[data-focus-visible] {
        outline: var(--g-focusRingWidth) solid var(--g-focusRingColor);
        outline-offset: -2px;
      }

      &[data-pressed] {
        background: var(--g-colorBodyAccent);
      }

      &[data-selected] {
        background: var(--g-colorBodyAccent);
        color: var(--g-colorBodyContent);
        --g-table-focusRingColor: var(--g-focusRingColor);

        &[data-focus-visible],
        .react-aria-Cell[data-focus-visible] {
          outline-offset: -4px;
        }
      }

      &[data-disabled] {
        color: var(--g-colorBodyContent);
      }
    }

    :global(.react-aria-Row.deleting) {
      opacity: 0.5;
      height: 0;
      pointer-events: none;
    }

    :global(.react-aria-Cell),
    :global(.react-aria-Column) {
      text-align: left;
      outline: none;
      word-break: normal;

      &[data-focus-visible] {
        outline: var(--g-focusRingWidth) solid var(--g-focusRingColor);
        outline-offset: -2px;
      }
      &:last-child {
        text-align: right;
      }

      // Empty state row styling
      :global(.react-aria-Row[data-empty-state='true']) & {
        &:first-child {
          text-align: center;
        }

        // Hide empty cells in empty state rows
        &:not(:first-child) {
          color: transparent;
          border-left: none;
        }
      }
    }

    :global(.react-aria-Column) {
      padding-left: toRem(16);
      padding-right: toRem(16);
      height: toRem(40);
    }
    :global(.react-aria-Cell) {
      padding: toRem(14) toRem(16);
      transform: translateZ(0);
      border-bottom: 1px solid var(--g-colorBorder);

      &[role='rowheader'] {
        color: var(--g-colorBodyContent);
        font-weight: var(--g-fontWeightMedium);
      }

      &:first-child {
        font-weight: var(--g-fontWeightMedium);
      }
    }

    /* join selected items if :has selector is supported */
    @supports selector(:has(.foo)) {
      .react-aria-Row[data-selected]:has(+ [data-selected]),
      .react-aria-Row[data-selected]:has(+ .react-aria-DropIndicator + [data-selected]) {
        --radius-bottom: 0px;
      }

      .react-aria-Row[data-selected] + [data-selected],
      .react-aria-Row[data-selected] + .react-aria-DropIndicator + [data-selected] {
        --radius-top: 0px;
      }
    }
  }

  // Minimal variant - removes all borders and reduces padding
  &[data-variant='minimal'] {
    :global(.react-aria-Table) {
      border: none;

      :global(.react-aria-TableHeader) {
        & tr:last-child .react-aria-Column {
          border-bottom: none;
        }
      }

      :global(.react-aria-Cell) {
        border-bottom: none;
        padding: toRem(10) 0;
      }

      :global(.react-aria-Column) {
        padding: toRem(5) 0;
      }

      :global(.react-aria-Row) {
        &[data-footer='true'] {
          border-top: none;
        }
      }
    }
  }
}

name: Auto Label PRs
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit messages
        id: commit-messages
        run: |
          # Get all commit messages from the PR
          MESSAGES=$(git log --format="%s" origin/${{ github.base_ref }}..${{ github.head_ref }})
          echo "messages<<EOF" >> $GITHUB_OUTPUT
          echo "$MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: changed-files
        run: |
          # Get all changed files
          ALL_CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          echo "all-changed-files<<EOF" >> $GITHUB_OUTPUT
          echo "$ALL_CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Function to check if files match pattern and set output
          check_files() {
            local category=$1
            local pattern=$2
            if echo "$ALL_CHANGED_FILES" | grep -qE "$pattern"; then
              echo "${category}_any_changed=true" >> $GITHUB_OUTPUT
            else
              echo "${category}_any_changed=false" >> $GITHUB_OUTPUT
            fi
          }
          
          # Check each category
          check_files "payroll"    "^(src/components/Payroll/|src/.*/payroll/)"
          check_files "company"    "^(src/components/Company/|src/.*/company/)"
          check_files "employee"   "^(src/components/Employee/|src/.*/employee/)"
          check_files "contractor" "^(src/components/Contractor/|src/.*/contractor/)"
          check_files "common_ui"  "^(src/components/Common/|src/components/Base/)"
          check_files "styles"     "(^|/)src/styles/|.*\.(scss|css)$"
          check_files "docs"       "^(docs/|.*\.md$)"
          check_files "build"      "^(build/|package\.json|package-lock\.json|tsconfig\.json|vite\.config\.ts|\.github/|eslint\.config\.mjs)"

      - name: Determine labels
        id: labels
        run: |
          LABELS=()

          # Domain labels based on changed files
          if [[ "${{ steps.changed-files.outputs.payroll_any_changed }}" == "true" ]]; then
            LABELS+=("domain:payroll")
          fi

          if [[ "${{ steps.changed-files.outputs.company_any_changed }}" == "true" ]]; then
            LABELS+=("domain:company")
          fi

          if [[ "${{ steps.changed-files.outputs.employee_any_changed }}" == "true" ]]; then
            LABELS+=("domain:employee")
          fi

          if [[ "${{ steps.changed-files.outputs.contractor_any_changed }}" == "true" ]]; then
            LABELS+=("domain:contractor")
          fi

          # Area labels
          if [[ "${{ steps.changed-files.outputs.common_ui_any_changed }}" == "true" ]]; then
            LABELS+=("common-ui")
          fi

          if [[ "${{ steps.changed-files.outputs.styles_any_changed }}" == "true" ]]; then
            LABELS+=("styles")
          fi

          if [[ "${{ steps.changed-files.outputs.docs_any_changed }}" == "true" ]]; then
            LABELS+=("docs")
          fi

          if [[ "${{ steps.changed-files.outputs.build_any_changed }}" == "true" ]]; then
            LABELS+=("build")
          fi

          # Conventional commit detection from commit messages
          COMMIT_MESSAGES="${{ steps.commit-messages.outputs.messages }}"

          # feat: new features
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)feat(\(.+\))?:'; then
            LABELS+=("feat")
          fi

          # fix: bug fixes
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)fix(\(.+\))?:'; then
            LABELS+=("fix")
          fi

          # docs: documentation
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)docs(\(.+\))?:'; then
            LABELS+=("docs")
          fi

          # chore: maintenance
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)chore(\(.+\))?:'; then
            LABELS+=("chore")
          fi

          # style: code style changes
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)style(\(.+\))?:'; then
            LABELS+=("style")
          fi

          # refactor: code refactoring
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)refactor(\(.+\))?:'; then
            LABELS+=("refactor")
          fi

          # perf: performance improvements
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)perf(\(.+\))?:'; then
            LABELS+=("perf")
          fi

          # test: testing
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)test(\(.+\))?:'; then
            LABELS+=("test")
          fi

          # build: build system changes (commit message)
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)build(\(.+\))?:'; then
            LABELS+=("build")
          fi

          # ci: CI/CD changes
          if echo "$COMMIT_MESSAGES" | grep -qE '(^|\n)ci(\(.+\))?:'; then
            LABELS+=("ci")
          fi

          # Remove duplicates and convert array to comma-separated string
          # Sort and remove duplicates using associative array
          declare -A unique_labels
          for label in "${LABELS[@]}"; do
            unique_labels["$label"]=1
          done

          # Convert back to array
          UNIQUE_LABELS=($(printf '%s\n' "${!unique_labels[@]}" | sort))

          IFS=','
          LABEL_STRING="${UNIQUE_LABELS[*]}"
          echo "labels=$LABEL_STRING" >> $GITHUB_OUTPUT

      - name: Apply labels
        if: steps.labels.outputs.labels != ''
        uses: actions/github-script@v7
        with:
          script: |
            const labels = '${{ steps.labels.outputs.labels }}'.split(',').filter(label => label.trim() !== '');

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
              
              console.log(`Applied labels: ${labels.join(', ')}`);
            }
